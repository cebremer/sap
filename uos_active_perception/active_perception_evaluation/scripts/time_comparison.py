#!/usr/bin/python -u
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 14 15:18:39 2015

@author: Thorsten Gedicke
"""

import numpy as np
import matplotlib.pyplot as plt
import common

from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Computer Modern Sans Serif']})
rc('text', usetex=True)

# INSERT PLOT DATA HERE
DATA = [('greedy', (213.0704753762387, 23.638934545766197), (0.78511602431524163, 0.21153805107178125), (1.0, 0.0), (0.068868560019867561, 0.0745980473527878)), ('phi3_dl2', (196.32527094343752, 22.601132124686568), (4.0574897727033923, 1.7972859251283841), (0.94030372990705346, 0.086442432464880953), (0.38043573445486106, 0.54259847895684743)), ('dl2_iw5', (199.98947467712551, 18.687985466086381), (3.2888435152861732, 0.41614945780154072), (0.95328202744415624, 0.051656716825206957), (0.35771589317288138, 0.18144773306046377)), ('dl2_iw10', (197.17612427926105, 23.666008319711914), (6.0935080637695949, 0.65996870628841664), (0.95129366019986106, 0.058990984443183507), (0.66051308251903107, 0.38236882662050636)), ('dl4_iw5', (200.49771547766952, 23.867103334070773), (3.4692744542186262, 0.47154680519389064), (0.95465352554614058, 0.061362715622061526), (0.3807147337080537, 0.17825929089736939)), ('dl4_iw10', (198.58672345434903, 23.17055207198268), (6.5182489877365812, 0.81006215210480681), (0.96041062291640034, 0.063974591032584086), (0.71419341530272118, 0.36697271497363165)), ('iw5', (200.69916554307821, 22.958085604651959), (3.5043079289179202, 0.44766435797967757), (0.95609741525934966, 0.059463272367431028), (0.38594031397966105, 0.17734803671708643)), ('iw10', (197.11582591556672, 21.695085679494621), (6.6468823238793293, 0.93611645937615751), (0.95474639022705987, 0.065122160190126566), (0.7298418189041096, 0.37702914937762633)), ('phi1_id5', (204.38688590426108, 23.898915419380042), (2.8733467281809699, 0.31357577273437354), (0.97000788772904423, 0.053245052441777421), (0.29581539327210882, 0.20660847030312146)), ('phi3_id5', (200.47056799231203, 24.970468652435894), (3.1698582083012847, 0.44142543963826331), (0.95294782975038506, 0.06768199255763252), (0.34046021968858131, 0.20380384287863537)), ('phi5_id5', (203.26063202982726, 24.110866596885955), (3.3838357428849433, 0.49006060291638626), (0.96650161101857868, 0.050698422919993172), (0.35997661943959736, 0.19963570147025875)), ('phi1_id10', (204.86777525890707, 23.874601060682348), (5.2104360544473858, 0.7906155049134328), (0.98350650566126507, 0.061774107608834991), (0.52030200425684936, 0.40965653521782158)), ('phi3_id10', (198.34571228051055, 26.054204517539198), (5.7968245300354342, 0.79087635628301278), (0.9559117274528377, 0.086641662166113867), (0.61723369577586207, 0.40740574510489774)), ('phi5_id10', (196.39789870797296, 21.748553531610508), (6.2545154828341412, 0.90445093796650911), (0.94992546357290286, 0.071132012945688064), (0.66069905219256764, 0.41575820848092365)), ('phi3_dl2_ud', (195.0107260762187, 21.691122333009535), (2.5206003672164896, 0.98742066924950456), (0.92687777002426708, 0.081010821952142528), (0.23243813176306624, 0.31534223770171954)), ('dl2_iw5_ud', (200.51264651739496, 22.318757176766905), (3.0937316494469256, 0.38828450897182376), (0.95385702508987047, 0.061919865807218914), (0.33643651660207613, 0.18668906555537867)), ('dl2_iw10_ud', (198.82601000953574, 25.501162493644223), (5.7821028926787879, 0.58582557587915618), (0.95746825747471109, 0.071944151577405344), (0.60673828815807551, 0.39006151140092743)), ('dl4_iw5_ud', (200.84207342392969, 24.883106628737568), (3.3410562065399594, 0.44437385771507087), (0.95558225414259468, 0.067647772057491493), (0.36185661893645488, 0.18027552604047478)), ('dl4_iw10_ud', (198.92490013294602, 24.309465296690135), (6.1995256988136278, 0.81721150259536468), (0.96062068245748089, 0.075144274931762567), (0.66521157793856667, 0.39151955635332786)), ('iw5_ud', (199.5506679557617, 23.470140293822269), (3.3745753168873533, 0.51502945278736656), (0.94935117263878177, 0.051772602260814947), (0.37170225355479453, 0.18252686915749233)), ('iw10_ud', (197.80501090327442, 23.533203740896898), (6.2343684849239187, 0.78289641298660151), (0.95587419125245854, 0.073749674245195171), (0.66209199342176872, 0.39280850657749983)), ('phi1_id5_ud', (204.42693355584817, 22.883290082108687), (2.8503074974210962, 0.34475720987453806), (0.9707225359804198, 0.055227253492665877), (0.29232635664625856, 0.20639277615175672)), ('phi3_id5_ud', (199.21342915326738, 24.475751763800371), (2.9996294535581924, 0.3927644430194368), (0.9470036993442259, 0.074474778477340034), (0.31526994542413794, 0.2074707910414455)), ('phi5_id5_ud', (199.59132526471177, 23.529706689672551), (3.0091285913140835, 0.39013492300163183), (0.94988552293159612, 0.078544084448053705), (0.32263590667944253, 0.20276659435129102)), ('phi1_id10_ud', (203.46721091909973, 23.334501886660959), (4.9650793406942704, 0.65592671068358799), (0.9760434408416897, 0.061577871173014803), (0.48859804803767126, 0.40417405512031984)), ('phi3_id10_ud', (197.36517505323044, 20.727396453627634), (5.6583035173800171, 0.63248530808105308), (0.95242080676605101, 0.074579893203939124), (0.58899177584536078, 0.41758527091962766)), ('phi5_id10_ud', (194.28640596863715, 21.87716771855689), (5.8505864589937335, 0.9298100558517437), (0.93889614705044155, 0.086143765968242497), (0.61787725003806226, 0.4143605350059732))]

filename = None
#filename = "eval_2.pdf"
algoplot = ["phi3_dl2","phi5_id10","phi3_id10","phi1_id10","greedy"]

figsize = (8, 2.8)

xlim = [150,230]

# plot all if algoplot not defined
try:
    algoplot
except NameError:
    algoplot = [a[0] for a in DATA if "_ud" not in a[0] or a[0].replace("_ud","") not in [x[0] for x in DATA]]

def plotit(algos):
    bw = 0.4
    gap_rel = 3

    # Set up plot
    # Common sizes: (10, 7.5) and (12, 9)
    plt.figure(facecolor="white", figsize=figsize)
    plt.subplots_adjust(0,0,1,1)
    # plot frame lines
    ax = plt.subplot(111)
    ax.spines["top"].set_visible(False)
    ax.spines["bottom"].set_visible(True)
    ax.spines["right"].set_visible(False)
    ax.spines["left"].set_visible(True)
    # tick marks
    plt.tick_params(axis="both", which="both", bottom="on", top="off", labelbottom="on", left="off", right="off", labelleft="on")
    # Gridlines
    ax.xaxis.grid(b=True, which='both', color='black', alpha=0.3, ls='--')

    si = (1 - 2 * bw) / (1 + gap_rel)
    for pos, name in enumerate(algoplot):
        try:
            algo = [a for a in algos if a[0] == name][0]
        except:
            algo = None
        algo_ud = [a for a in algos if a[0] == name+"_ud"]

        if algo and "_ud" in algo[0]:
            algo_ud = [algo]
            algo = None
        if algo:
            plotAlgoBar(algo, pos if not algo_ud else  pos+(bw+si)/2.0, bw, (common.tableau20[0], common.tableau20[1]))
        if algo_ud:
            plotAlgoBar(algo_ud[0], pos if not algo else pos - (bw+si) / 2.0, bw, (common.tableau20[2], common.tableau20[3]))

    ticklabels = []
    for psi, phi in [common.nameDecode(a, raw=True)[1:] for a in algoplot]:
        if psi==0:
            ticklabels.append((r"$\psi=%s$, $\phi=%s$" % (psi, phi))+ "\n$\mathit{(greedy)}$")
        else:
            ticklabels.append(r"$\psi=%s$, $\phi=%s$" % (psi, phi))
    plt.yticks(np.arange(len(algoplot)), ticklabels, multialignment='center')
    try:
        plt.xlim(*xlim)
    except NameError:
        pass
    plt.ylim(-(2*bw+si/2.0), len(algoplot)-1+bw+si/2.0)
    plt.xlabel('expected time [s]', x=1, ha="right")
    #plt.legend(noudbar+udbar, [r"execution ($\xi=0$)", r"planning $\xi=0$", r"execution ($\xi=1$)", r"planning ($\xi=1$)"], loc="lower right", prop={'size':11})
    if filename:
        plt.savefig(filename, bbox_inches="tight")
    else:
        plt.tight_layout()
        plt.show()

def plotAlgoBar(algo, pos, bw, colors):
    a = plt.barh(pos, algo[1][0], height=bw, color=colors[0], align='center', edgecolor="none")
    plt.errorbar(algo[1][0], pos + bw/6.0, xerr=algo[1][1]/2.0, capsize=0, color='k')
    b = plt.barh(pos, algo[2][0], left=algo[1][0], height=bw, color=colors[1], align='center', edgecolor="none")
    plt.errorbar(algo[2][0] + algo[1][0], pos - bw/6.0, xerr=algo[2][1]/2.0, capsize=0, color='k')
    return (a,b)

def main():
    plotit(DATA)

if __name__=="__main__":
    main()
